{"version":3,"sources":["serviceWorker.js","components/AddTodo.js","components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/layout/Footer.js","store/containers/Footer.js","store/actions/changeThemeAction.js","components/TodoApp.js","store/reducers/themeReducer.js","store/reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Addtodo","props","useState","title","setTitle","className","onSubmit","e","preventDefault","addTodo","type","placeholder","value","onChange","target","Header","TodoItem","todo","completed","id","checked","handleChange","onClick","deleteTodo","Todos","todos","map","key","Footer","submitThemeColor","bind","color","console","log","this","saveColorTheme","nextprops","JSON","stringify","document","documentElement","style","setProperty","themeColor","Component","connect","state","dispatch","payload","saveTheme","TodoApp","setState","useEffect","axios","get","params","_limit","then","response","data","todoData","post","delete","reponse","filter","initState","combineReducers","action","Object","assign","store","createStore","rootReducer","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9870c4fd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport React, { useState } from 'react';\r\n\r\nfunction Addtodo (props) {\r\n   const [title, setTitle] = useState(\"\")\r\n\r\n   const onInputChange = e => {\r\n       setTitle(e.target.value);\r\n   }\r\n\r\n   const addTodo = e => {\r\n       e.preventDefault();\r\n       props.addTodo(title);\r\n       setTitle(\"\");\r\n   };\r\n\r\n    return (\r\n        <form className=\"form-container\" onSubmit={addTodo} >\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Add Todo...\"\r\n                className=\"input-text\"\r\n                value={title}\r\n                onChange={onInputChange}\r\n            />\r\n\r\n\r\n            <input type=\"submit\" value=\"Submit\" className=\"input-submit\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Addtodo;","import React from 'react';\r\n\r\nfunction Header() {\r\n  \r\n   return (\r\n      <header className=\"header-container\">\r\n         <h1 className=\"header-title\">Simple Todo App</h1>\r\n      </header>\r\n   );\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction TodoItem(props) {\r\n\r\n   const {completed, id, title} = props.todo\r\n\r\n   return (\r\n         <li className=\"todo-item\">\r\n            <input \r\n               checked={completed} \r\n               type=\"checkbox\"\r\n               onChange={() => props.handleChange(id)}/>\r\n            <span className={completed ? \"completed\" : null}>\r\n               {title}\r\n            </span>\r\n            <button className=\"btn-style\" \r\n                     onClick={() => props.deleteTodo(id)}\r\n                     > X </button>\r\n         </li>\r\n   );\r\n   \r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nfunction Todos(props) {\r\n\r\n   return (\r\n      <div>\r\n         <ul>\r\n            {props.todos.map(todo => (\r\n               <TodoItem \r\n                  key={todo.id} \r\n                  todo={todo} \r\n                  handleChange={props.handleChange}\r\n                  deleteTodo={props.deleteTodo}/>\r\n            ))}\r\n         </ul>\r\n      </div>\r\n   );\r\n   \r\n}\r\n\r\nexport default Todos;","import React, { Component } from 'react';\r\n\r\nconst RED = \"#ff0000\";\r\nconst BLUE = \"#0000ff\";\r\nconst GRAY = \"#678c89\";\r\n\r\nclass Footer extends Component {\r\n   constructor(props){\r\n      super(props)\r\n      this.submitThemeColor = this.submitThemeColor.bind(this)\r\n   }\r\n\r\n   submitThemeColor(color){\r\n         if (color){\r\n            console.log('handleChangeTheme')\r\n            this.props.saveColorTheme(color);\r\n         }\r\n   };\r\n   componentWillReceiveProps(nextprops){\r\n      console.log('UNSAFE_componentWillReceiveProps: ' +JSON.stringify(nextprops))\r\n      document\r\n         .documentElement\r\n         .style\r\n         .setProperty(\"--main-color\", nextprops.themeColor.color);\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"footer\">\r\n            <div className=\"vertical-center\">\r\n               <span>Choose Theme</span>\r\n               <button onClick={()=>this.submitThemeColor(RED)} className=\"dot red\" />\r\n               <button onClick={()=>this.submitThemeColor(BLUE)} className=\"dot blue\" />\r\n               <button onClick={()=>this.submitThemeColor(GRAY)} className=\"dot gray\" />\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Footer;","import { connect } from 'react-redux';\r\nimport { saveTheme } from '../actions/changeThemeAction';\r\nimport Footer from '../../components/layout/Footer';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   dispatch,\r\n   saveColorTheme: color => dispatch(saveTheme(color))\r\n});\r\n\r\nfunction mapStateToProps(state){\r\n   return{\r\n      themeColor: state.color\r\n   };\r\n};\r\n\r\nexport default connect(\r\n   mapStateToProps,\r\n   mapDispatchToProps\r\n)(Footer);","export const saveTheme = color => ({\r\n      type: \"CHANGE_THEME\",\r\n      payload: {\r\n         color\r\n   }\r\n });","import React, { useState, useEffect } from \"react\";\r\nimport Addtodo from './AddTodo';\r\nimport Header from './layout/Header';\r\nimport Todos from './Todos';\r\nimport axios from \"axios\";\r\nimport Footer from \"../store/containers/Footer\";\r\n\r\n\r\nfunction TodoApp() {\r\n   const [state, setState] = useState({\r\n       todos: []\r\n   });\r\n\r\n\r\n  const handleCheckboxChange = id => {\r\n       setState({\r\n           todos: state.todos.map(todo => {\r\n               if (todo.id === id) {\r\n                   todo.completed = !todo.completed;\r\n               }\r\n               return todo;\r\n           })\r\n       });\r\n   };\r\n\r\n   const deleteTodo = id => {\r\n        axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\r\n            .then(reponse => setState({\r\n                todos: [\r\n                ...state.todos.filter(todo => {\r\n                    return todo.id !== id;\r\n                })\r\n            ]\r\n        }))\r\n    };\r\n\r\n\r\n   const addTodo = title => {\r\n       const todoData = {\r\n           title: title,\r\n           completed: false\r\n       }\r\n       axios.post(\"https://jsonplaceholder.typicode.com/todos\", todoData)\r\n           .then(response => {\r\n               console.log(response.data)\r\n               setState({\r\n                   todos: [...state.todos, response.data]\r\n               })\r\n           });\r\n   };\r\n\r\n\r\n   useEffect(() => {\r\n        const config = {\r\n            params: {\r\n                _limit: 5\r\n        }\r\n    }\r\n    // tạo GET request để lấy danh sách todos\r\n        axios.get(\"https://jsonplaceholder.typicode.com/todos\", config)\r\n            .then(response => setState({ todos: response.data }));\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Header />\r\n            <Addtodo addTodo={addTodo} />\r\n            <Todos todos={state.todos}\r\n                handleChange={handleCheckboxChange}\r\n                deleteTodo={deleteTodo} />\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoApp;","let initState = {\r\n   color: \"#FFFFFF\"\r\n};\r\n\r\nexport default function themeReducer(state = initState, action){\r\n   switch (action.type){\r\n      case 'CHANGE_THEME':\r\n         console.log('themeReducer: ' + JSON.stringify(state))\r\n         return Object.assign({}, state, {\r\n            color: action.payload.color\r\n         });\r\n         default:\r\n            return initState;\r\n   }\r\n}","import {combineReducers} from 'redux';\r\nimport color from './themeReducer';\r\n\r\nexport default combineReducers({\r\n   color\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport TodoApp from './components/TodoApp';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}